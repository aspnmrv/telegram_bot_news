import re
import asyncio
import logging
import config
import ssl

from news.news import News
from sender.sender import Sender
from telethon.tl.custom import Button
from telethon import TelegramClient, events, sync, functions
from telethon.tl.types import InputPeerChannel
from globals import TOPICS, LIMIT_REQUESTS, MAX_LENGTH_KEYWORDS, FLOOD_SECONDS
from tools.tools import read_data, \
    is_expected_steps, get_keyboard, match_topics_name, \
    get_stat_interests, get_stat_keywords, send_user_main_stat, send_user_file_stat, get_choose_topics, is_ru_language,\
    get_code_fill_form, get_diff_between_ts
from db.db_tools import _update_current_user_step, _update_user_states, _get_user_states, \
    _get_current_user_step, _create_db
from topics.topics import get_state_markup, update_text_from_state_markup, build_markup, get_proposal_topics, get_available_topics
from pathlib import Path
from db.db import *

logging.basicConfig(filename=Path(__file__).parent.resolve() / "data" / "logs.log", level=logging.INFO)
logging.info("start")


api_id = config.app_id
api_hash = config.api_hash
bot_token = config.bot_token
PASS = config.password
login = config.login

PATH = Path(__file__).parent.resolve() / "data"

try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context

bot = TelegramClient("bot", api_id, api_hash).start(bot_token=bot_token)

session_dir = Path(__file__).parent.resolve()

client = TelegramClient(
    str("session_name.session"),
    api_id,
    api_hash
)

client.connect()

print(client.is_user_authorized())

if not client.is_user_authorized():
    try:
        client.sign_in(password=PASS)
    except:
        print("Error")
        client.send_code_request(phone=login, force_sms=False)
        print(client)
        try:
            client.sign_in(login, input("Enter code: "))
        except:
            client.sign_in(password=PASS)
print(client.is_user_authorized())


@bot.on(events.NewMessage(pattern="/news"))
async def get_news(event):
    print(event)
    user_id = event.message.peer_id.user_id
    if await get_code_fill_form(user_id) == -1:
        await event.client.send_message(event.chat_id,
                                        "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üôÉ\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ /start", buttons=Button.clear())
        await update_data_events_db(user_id, "news", {"step": -1, "error": "without users"})
    elif await get_code_fill_form(user_id) == 1:
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", "–ù–µ –Ω—É–∂–Ω–æ"])
        await _update_current_user_step(user_id, 824)
        await event.client.send_message(event.chat_id, "–ö–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!\n\n"
                                                       "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ ‚ò∫Ô∏è", buttons=keyboard)
        await update_data_events_db(user_id, "news", {"step": -1, "error": "without channels"})
    elif await get_code_fill_form(user_id) == 2:
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—ã", "–ù–µ –Ω—É–∂–Ω–æ"])
        await _update_current_user_step(user_id, 823)
        await event.client.send_message(event.chat_id, "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã. –°–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? ‚ò∫Ô∏è", buttons=keyboard)
        await update_data_events_db(user_id, "news", {"step": -1, "error": "without channels"})
    else:
        last_ts_event = await get_event_from_db(user_id, "news")
        print("last_ts_event", last_ts_event)
        if await get_diff_between_ts(str(last_ts_event)) <= FLOOD_SECONDS:
            print("flood")
            await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n–ü–æ–ø—Ä–æ–±—É–π "
                                                           "—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üôÇ", buttons=Button.clear())
            await update_data_events_db(user_id, "news", {"step": -1, "error": "flood"})
        else:
            cnt_uses = await get_stat_use_db(user_id)
            if cnt_uses < LIMIT_REQUESTS:
                await event.client.send_message(event.chat_id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..–ú–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ 6 –º–∏–Ω—É—Ç ‚ò∫Ô∏è",
                                                buttons=Button.clear())
                await update_data_events_db(user_id, "news", {"step": -1})

                user_topics = await get_user_topics_db(user_id)
                if user_topics:
                    sender = Sender(client, bot)
                    data = await get_data_channels_db(user_id)
                    await sender.send_aggregate_news(user_id, data, user_topics, False)
                else:
                    await event.client.send_message(event.chat_id,
                                                    "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –µ—â–µ –Ω–µ—Ç üôÉ\n\n"
                                                    "–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–Ω–æ "
                                                    "–ø–æ –∫–æ–º–∞–Ω–¥–µ /channels", buttons=Button.clear())
            else:
                await event.client.send_message(event.chat_id,
                                                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ü§ì", buttons=Button.clear())
    return


@bot.on(events.NewMessage(pattern="/summary"))
async def get_summary(event):
    print(event)
    user_id = event.message.peer_id.user_id
    if await get_code_fill_form(user_id) == -1:
        await event.client.send_message(event.chat_id,
                                        "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üôÉ\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ /start", buttons=Button.clear())
        await update_data_events_db(user_id, "summary", {"step": -1, "error": "without users"})
    elif await get_code_fill_form(user_id) == 1:
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", "–ù–µ –Ω—É–∂–Ω–æ"])
        await _update_current_user_step(user_id, 824)
        await event.client.send_message(event.chat_id, "–ö–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!\n\n"
                                                       "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ ‚ò∫Ô∏è", buttons=keyboard)
        await update_data_events_db(user_id, "summary", {"step": -1, "error": "without channels"})
    elif await get_code_fill_form(user_id) == 2:
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—ã", "–ù–µ –Ω—É–∂–Ω–æ"])
        await _update_current_user_step(user_id, 823)
        await event.client.send_message(event.chat_id, "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã. –°–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? ‚ò∫Ô∏è", buttons=keyboard)
        await update_data_events_db(user_id, "summary", {"step": -1, "error": "without channels"})
    else:
        print("else")
        last_ts_event = await get_event_from_db(user_id, "summary")
        print("last_ts_event", last_ts_event)
        if await get_diff_between_ts(str(last_ts_event)) <= FLOOD_SECONDS:
            print("get_diff_between_ts")
            await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã!\n\n–ü–æ–ø—Ä–æ–±—É–π "
                                                           "—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üôÇ", buttons=Button.clear())
            await update_data_events_db(user_id, "summary", {"step": -1, "error": "flood"})
        else:
            print("else 2")
            await update_data_events_db(user_id, "summary", {"step": -1})
            cnt_uses = await get_stat_use_db(user_id)
            if cnt_uses < LIMIT_REQUESTS:
                await event.client.send_message(event.chat_id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..–ú–Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ 6 –º–∏–Ω—É—Ç ‚ò∫Ô∏è",
                                                buttons=Button.clear())
                user_topics = await get_user_topics_db(user_id)
                if user_topics:
                    sender = Sender(client, bot)
                    data = await get_data_channels_db(user_id)
                    await sender.send_aggregate_news(user_id, data, user_topics, True)
                else:
                    await event.client.send_message(event.chat_id,
                                                    "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –µ—â–µ –Ω–µ—Ç üôÉ\n\n"
                                                    "–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –º–æ–∂–Ω–æ "
                                                    "–ø–æ –∫–æ–º–∞–Ω–¥–µ /channels", buttons=Button.clear())
            else:
                await event.client.send_message(event.chat_id,
                                                "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ü§ì", buttons=Button.clear())
    return


@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    await _create_db()
    try:
        await _get_current_user_step(event.message.peer_id.user_id)
    except:
        pass

    sender_info = await event.get_sender()
    user_id = event.message.peer_id.user_id
    if not await is_user_exist_db(user_id):
        await update_data_users_db(sender_info)
    await _update_current_user_step(user_id, 1)

    keyboard = await get_keyboard(["–ù–∞—á–∞—Ç—å üöÄ", "–û–±–æ –º–Ω–µ"])
    text = """–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ —Ç–≤–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. \n–ó–∞–ø–æ–ª–Ω–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≤—ã–±–µ—Ä–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã üìù\n\n–ù–∞—á–Ω–µ–º?"""
    await event.client.send_message(event.chat_id, text, buttons=keyboard)
    await update_data_events_db(user_id, "start", {"step": -1})
    return


@bot.on(events.NewMessage(pattern="–ù–∞—á–∞—Ç—å üöÄ"))
async def get_begin(event):
    user_id = event.message.peer_id.user_id

    if await is_expected_steps(user_id, [3, 24]):
        keyboard = await get_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ù–∞–∑–∞–¥"])
        await _update_current_user_step(user_id, 2)
        await event.client.send_message(
            event.chat_id,
            "–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ –ø–æ –æ–¥–Ω–æ–º—É —Ä–µ–ø–æ—Å—Ç—É –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å —á–∏—Ç–∞—Ç—å! –Ø –∏—Ö –∑–∞–ø–æ–º–Ω—é –∏ –±—É–¥—É "
            "–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ç–∞–º üïµÔ∏è.\n\n–ù–æ –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã! –ü–æ–∫–∞ –º–æ–∂–Ω–æ"
            " –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª–µ–µ 3-—Ö –∫–∞–Ω–∞–ª–æ–≤ üòá\n\n"
            "–Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏. –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å, "
            "–∫–æ–Ω–µ—á–Ω–æ, –ª—é–±—ã–µ, –Ω–æ —Ç–æ–≥–¥–∞ —è –±—É–¥—É –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω üòî",
            buttons=keyboard
        )
    elif await is_expected_steps(user_id, [1]):
        await _update_current_user_step(user_id, 2)
        back_button = await get_keyboard(["–ù–∞–∑–∞–¥"])
        await event.client.send_message(
            event.sender_id,
            "–ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ –ø–æ –æ–¥–Ω–æ–º—É —Ä–µ–ø–æ—Å—Ç—É –∏–∑ –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ö–æ—á–µ—à—å —á–∏—Ç–∞—Ç—å! –Ø –∏—Ö –∑–∞–ø–æ–º–Ω—é –∏ –±—É–¥—É "
            "–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Ç–∞–º üïµÔ∏è.\n\n–ù–æ –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã! –ü–æ–∫–∞ –º–æ–∂–Ω–æ"
            " –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª–µ–µ 3-—Ö –∫–∞–Ω–∞–ª–æ–≤ üòá\n\n"
            "–Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏. –ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å, "
            "–∫–æ–Ω–µ—á–Ω–æ, –ª—é–±—ã–µ, –Ω–æ —Ç–æ–≥–¥–∞ —è –±—É–¥—É –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω üòî",
            buttons=back_button
        )
    else:
        pass
    return


@bot.on(events.CallbackQuery())
async def handler(event):
    data_filter = event.data.decode("utf-8").split("-")
    if len(data_filter) < 2:
        user_id = event.sender_id
        current_topics = await _get_user_states(user_id, "topics")
        current_state = await _get_user_states(user_id, "states")
        current_topics = await match_topics_name(current_topics)
        topic_clicked = (event.data.split(b'$')[0]).decode("utf-8")

        markup = bot.build_reply_markup(await build_markup(current_topics, current_state))
        await update_text_from_state_markup(markup, current_state, current_topics, topic_clicked)
        await get_state_markup(markup, user_id)

        await event.client.edit_message(event.sender_id, event.message_id, buttons=markup)
    else:
        await event.client.edit_message(event.sender_id, event.message_id, "–°–ø–∞—Å–∏–±–æ ‚ò∫Ô∏è")
        data = event.data.decode("utf-8")
        uid = data[:-2]
        score = int(data.split("-")[-1])
        await insert_score_db(uid, score)


@bot.on(events.NewMessage(pattern="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
async def get_end(event):
    """"""
    user_id = event.message.peer_id.user_id
    await update_data_events_db(user_id, "its_all", {"step": -1})

    if await is_expected_steps(user_id, [4]):
        await _update_current_user_step(user_id, 3)
        user_cur_states = await _get_user_states(user_id, "states")

        user_cur_topics = await _get_user_states(user_id, "topics")

        user_cur_topics = await match_topics_name(user_cur_topics)
        markup = bot.build_reply_markup(await get_proposal_topics(user_cur_topics, user_cur_states))

        await get_state_markup(markup, user_id)
        success_button = await get_keyboard(["–ì–æ—Ç–æ–≤–æ!", "–ù–∞–∑–∞–¥"])
        await event.client.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã üê•\n", buttons=markup)
        await event.client.send_message(event.sender_id, "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å —Å –≤—ã–±–æ—Ä–æ–º, –∂–º–∏ –ì–æ—Ç–æ–≤–æ!", buttons=success_button)
    elif await is_expected_steps(user_id, [8]):
        await _update_current_user_step(user_id, 31)
        user_cur_states = await _get_user_states(user_id, "states")
        user_cur_topics = await _get_user_states(user_id, "topics")
        user_cur_topics = await match_topics_name(user_cur_topics)
        markup = bot.build_reply_markup(await get_proposal_topics(user_cur_topics, user_cur_states))

        await get_state_markup(markup, user_id)
        success_button = await get_keyboard(["–ì–æ—Ç–æ–≤–æ!"])
        await event.client.send_message(event.chat_id, "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã üê•\n", buttons=markup)
        await event.client.send_message(event.sender_id, "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å —Å –≤—ã–±–æ—Ä–æ–º, –∂–º–∏ –ì–æ—Ç–æ–≤–æ!",
                                        buttons=success_button)
    elif await is_expected_steps(user_id, [2, 9]):
        await _update_current_user_step(user_id, 3)
        total_topics = list(TOPICS.keys())

        await _update_user_states(user_id, "topics", total_topics)
        await _update_user_states(user_id, "states", ["" for _ in range(len(total_topics))])

        proposal_topics = await match_topics_name(total_topics)
        markup = bot.build_reply_markup(await get_proposal_topics(proposal_topics))

        await get_state_markup(markup, user_id)
        success_button = await get_keyboard(["–ì–æ—Ç–æ–≤–æ!", "–ù–∞–∑–∞–¥"])
        text = "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã üê•\n"
        await event.client.send_message(event.chat_id, text, buttons=markup)
        await event.client.send_message(event.sender_id,
                                        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å —Å –≤—ã–±–æ—Ä–æ–º, –∂–º–∏ –ì–æ—Ç–æ–≤–æ üëá", buttons=success_button)
    else:
        pass
    return


async def wait_post(event):
    """"""
    keyboard = await get_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"])
    await event.client.send_message(event.chat_id, "–ü—Ä–∏–Ω—è–ª. –ï—â–µ?üòè", buttons=keyboard)

    return


@bot.on(events.NewMessage(forwards=True))
async def forwards_message(event):
    user_id = event.message.peer_id.user_id
    if await is_expected_steps(user_id, [2, 9]):
        if await is_expected_steps(user_id, [9]):
            await remove_from_db("user_channels", user_id)
        if event.message.message == "":
            await asyncio.sleep(1)
        else:
            await event.client.send_message(event.chat_id, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..", buttons=Button.clear())
            current_step = await _get_current_user_step(user_id)
            try:
                forward_channel_id = int(str("100") + str(event.message.fwd_from.from_id.channel_id)) * -1
                channel_info = await News.get_channel_info(forward_channel_id)
                if not channel_info:
                    await asyncio.sleep(2)
                    channel_info = await News.get_channel_info(forward_channel_id)
                    username_forward_channel = channel_info
                else:
                    username_forward_channel = channel_info
            except Exception as e:
                username_forward_channel = ""
                forward_channel_id = -1
                await event.client.send_message(user_id, "–¢–∞–∫—Å, –ª–∏–±–æ —ç—Ç–æ —Å–æ–≤—Å–µ–º "
                                                         "–Ω–µ –∫–∞–Ω–∞–ª, –ª–∏–±–æ –∫–∞–Ω–∞–ª, –Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π. "
                                                         "–ü–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? üôÇ", buttons=Button.clear())
                await update_data_events_db(user_id, "forward_error",
                                            {"step": current_step,
                                             "channel_id": int(forward_channel_id), "error": "wrong_channel"})
            if username_forward_channel and forward_channel_id != -1:
                user_channels = await get_user_channels_db(user_id)
                channels_unique = set(user_channels)
                if str(username_forward_channel) in list(channels_unique):
                    await update_data_events_db(user_id, "forward_error",
                                             {"step": current_step,
                                              "channel_id": int(forward_channel_id), "error": "exist"})
                    keyboard = await get_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"])
                    await event.client.send_message(event.chat_id,
                                                    "–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω! –ù–æ –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π üôÉ",
                                                    buttons=keyboard)
                elif len(channels_unique) == 3 and str(username_forward_channel) not in channels_unique:
                    await update_data_events_db(user_id, "forward_error",
                                             {"step": current_step,
                                              "channel_id": int(forward_channel_id), "error": "limit"})
                    text = "–ü–æ–∫–∞ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –±–æ–ª—å—à–µ 3-—Ö –∫–∞–Ω–∞–ª–æ–≤. üòî\n\n" \
                           "–ù–æ —Å–ø–∏—Å–æ–∫ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–∑ –º–µ–Ω—é"
                    keyboard = await get_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"])
                    await event.client.send_message(event.chat_id, text, buttons=keyboard)
                else:
                    message_from_channel = event.message.message
                    is_ru_channel = True
                    if message_from_channel and len(message_from_channel) > 10:
                        if not await is_ru_language([message_from_channel]):
                            is_ru_channel = False

                    if not is_ru_channel:
                        keyboard = await get_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"])
                        await event.client.send_message(
                            event.chat_id,
                            "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ, "
                            "–∞ —è –ø–æ–∫–∞ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å ru-—Ç–µ–∫—Å—Ç–æ–º üòî\n\n–ü–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ?)",
                            buttons=keyboard
                        )
                        await update_data_events_db(user_id, "forward_error",
                                                    {"step": current_step,
                                                     "channel_id": int(forward_channel_id), "error": "no_ru"})
                    else:
                        await update_data_events_db(user_id, "forward_message",
                                                 {"step": current_step, "channel_id": forward_channel_id})
                        await update_user_channels_db(user_id, str(username_forward_channel))
                        await wait_post(event)
                        if await is_expected_steps(user_id, [9]):
                            await event.client.send_message(event.chat_id, "–ö—Å—Ç–∞—Ç–∏, –Ω–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã, "
                                                                     "–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—É–∂–Ω—ã üìù\n\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ "
                                                                     "—è –æ—á–∏—Å—Ç–∏–ª")
                        await _update_current_user_step(user_id, 2)
            else:
                pass
    else:
        pass


@bot.on(events.NewMessage(pattern="–ì–æ—Ç–æ–≤–æ!"))
async def get_done(event):
    """"""
    user_id = event.message.peer_id.user_id

    if await is_expected_steps(user_id, [6, 5, 11]):
        await _update_current_user_step(user_id, 4)
        text = "–ú–æ–≥—É –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, " \
               "—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–±–æ–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ù–µ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø–æ—Å—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Ö " \
               "–Ω–∞–π–¥—É üïµÔ∏è\n"
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å", "–ù–µ –Ω—É–∂–Ω–æ", "–ù–∞–∑–∞–¥"])
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
    elif await is_expected_steps(user_id, [3, 4]):
        current_step = await _get_current_user_step(user_id)
        user_cur_states = await _get_user_states(user_id, "states")
        user_cur_topics = await _get_user_states(user_id, "topics")
        chooses_topic = list()

        for state, topic in zip(user_cur_states, user_cur_topics):
            if state != "":
                chooses_topic.append(topic)

        if len(chooses_topic) != 0:
            await update_data_events_db(user_id, "choose_topic", {"step": current_step, "topics": chooses_topic})
            await update_data_topics_db(user_id, chooses_topic)
            if await is_expected_steps(user_id, [3]):
                user_cur_topics = await _get_user_states(user_id, "topics")
                if len(user_cur_topics) != 0:
                    text = "–ó–∞–ø–æ–º–Ω–∏–ª! \n\n–ú–æ–≥—É –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –æ—Ç–ø—Ä–∞–≤–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, " \
                   "—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–±–æ–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ù–µ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø–æ—Å—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö " \
                   "–Ω–∞–π–¥—É —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ üïµÔ∏è\n"
                    keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å", "–ù–µ –Ω—É–∂–Ω–æ", "–ù–∞–∑–∞–¥"])
                    await _update_current_user_step(user_id, 4)
                    await event.client.send_message(event.chat_id, text, buttons=keyboard)
                else:
                    text = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã..ü¶¶"
                    keyboard = await get_keyboard(["–ì–æ—Ç–æ–≤–æ!"])
                    await event.client.send_message(event.chat_id, text, buttons=keyboard)
                    await get_end(event)
            else:
                text = "–ó–∞–ø–æ–º–Ω–∏–ª!"
                keyboard = await get_keyboard(["–ó–∞–ø—É—Å—Ç–∏—Ç—å"])
                await _update_current_user_step(user_id, 4)
                await event.client.send_message(event.chat_id, text, buttons=keyboard)
        else:
            text = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã..ü¶¶"
            keyboard = await get_keyboard(["–ì–æ—Ç–æ–≤–æ!"])
            await event.client.send_message(event.chat_id, text, buttons=keyboard)
    elif await is_expected_steps(user_id, [31]):
        user_cur_states = await _get_user_states(user_id, "states")
        user_cur_topics = await _get_user_states(user_id, "topics")

        chooses_topics = await get_choose_topics(user_cur_states, user_cur_topics)

        if chooses_topics:
            await update_data_topics_db(user_id, chooses_topics)
            text = "–û–±–Ω–æ–≤–∏–ª —Å–ø–∏—Å–æ–∫ —Ç–µ–º üí´"
        else:
            text = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã..ü¶¶"
            keyboard = await get_keyboard(["–ì–æ—Ç–æ–≤–æ!"])
            await event.client.send_message(event.chat_id, text, buttons=keyboard)

        await event.client.send_message(event.chat_id, text, buttons=Button.clear())
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="–î–æ–±–∞–≤–∏—Ç—å"))
async def get_add_keywords(event):
    """"""
    user_id = event.message.peer_id.user_id
    current_step = await _get_current_user_step(user_id)
    await update_data_events_db(user_id, "add_keywords", {"step": current_step})

    if await is_expected_steps(user_id, [4]):
        await _update_current_user_step(user_id, 5)
        text = "–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å–ª–æ–≤–∞), " \
               "—á—Ç–æ–±—ã —è –º–æ–≥ –∏—Å–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è \n" \
               "–ù–∞–ø—Ä–∏–º–µ—Ä: `—Ñ—É—Ç–±–æ–ª, –≤–æ–π–Ω–∞, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã`"
        await event.client.send_message(event.chat_id, text, buttons=Button.clear())
    elif await is_expected_steps(user_id, [7]):
        text = f"–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ " \
               f"(–º–∏–Ω–∏–º—É–º, –¥–≤–∞ —Å–ª–æ–≤–∞)"
        await event.client.send_message(event.chat_id, text, buttons=Button.clear())
    else:
        pass

    return


async def filter_keywords(event):
    """"""
    user_id = event.message.peer_id.user_id

    if await is_expected_steps(user_id, [5, 7, 14]) and event.message.message != "–î–æ–±–∞–≤–∏—Ç—å":
        return True
    else:
        return False


@bot.on(events.NewMessage(pattern=r'[^,]+(,[^,]+)+', forwards=False))
async def create_keywords(event):
    """"""
    keywords = event.message.message
    user_id = event.message.peer_id.user_id
    current_step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [5]):
        await _update_current_user_step(user_id, 6)
        if len(keywords) > MAX_LENGTH_KEYWORDS:
            await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤, "
                                                           "–¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üåù")
            await update_data_events_db(user_id, "input_keywords", {"step": current_step, "error": "too_many"})
        else:
            pattern = re.compile(r'\s+')
            keywords = re.sub(pattern, '', keywords)
            if len(keywords.split(",")) > 0:
                keywords = keywords.split(",")
                keywords = [word.lower() for word in keywords if word != ""]
            await update_user_keywords_db(user_id, keywords)

            text = "–û—Ç–ª–∏—á–Ω–æ! –Ø –¥–æ–±–∞–≤–∏–ª –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ üóù\n\n" \
                   "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòå"
            keyboard = await get_keyboard(["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "–ù–∞–∑–∞–¥"])
            await event.client.send_message(event.chat_id, text, buttons=keyboard)
            await update_data_events_db(user_id, "input_keywords", {"step": current_step})
    elif await is_expected_steps(user_id, [7]):
        await remove_from_db("user_keywords", user_id)
        await _update_current_user_step(user_id, 6)
        if len(keywords) > MAX_LENGTH_KEYWORDS:
            await event.client.send_message(event.chat_id, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ üåù")
            await update_data_events_db(user_id, "input_keywords", {"step": current_step, "error": "too_many"})
        else:
            pattern = re.compile(r'\s+')
            keywords = re.sub(pattern, '', keywords)
            if len(keywords.split(",")) > 0:
                keywords = keywords.split(",")
                keywords = [word.lower() for word in keywords if word != ""]
            await update_user_keywords_db(user_id, keywords)

            text = "–û—Ç–ª–∏—á–Ω–æ! –Ø –¥–æ–±–∞–≤–∏–ª –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ üóù\n\n" \
                   "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üòå"
            keyboard = await get_keyboard(["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"])
            await event.client.send_message(event.chat_id, text, buttons=keyboard)
            await update_data_events_db(user_id, "input_keywords", {"step": current_step})
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="–ù–µ –Ω—É–∂–Ω–æ"))
async def get_dont_keywords(event):
    """"""
    user_id = event.message.peer_id.user_id
    current_step = await _get_current_user_step(user_id)
    await update_data_events_db(user_id, "no_keywords", {"step": current_step})

    await remove_from_db("user_keywords", user_id)
    if await is_expected_steps(user_id, [4, 6]):
        await _update_current_user_step(user_id, 5)
        keyboard = await get_keyboard(["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", "–ù–∞–∑–∞–¥"])
        text = "–û–∫–∏. –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π –µ—â–µ —Ä–∞–∑ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º!"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
    elif await is_expected_steps(user_id, [7]):
        text = "–û–∫–∏!"
        keyboard = await get_keyboard(["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"])
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
    elif await is_expected_steps(user_id, [823, 824]):
        text = "–û–∫–∏!"
        await event.client.send_message(event.chat_id, text, buttons=Button.clear())
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"))
async def get_go(event):
    """"""
    user_id = event.message.peer_id.user_id
    if await is_expected_steps(user_id, [5, 6, 13, 7]):
        await _update_current_user_step(user_id, 11)
        channels = await get_user_channels_db(user_id)
        channels = set(channels)
        channels = ", ".join([f"@{channel}" for channel in channels])
        topics = await get_user_topics_db(user_id)
        topics = await match_topics_name(topics)
        topics = ", ".join(topics)
        keywords = await get_user_keywords_db(user_id)
        keywords = ", ".join(keywords)

        text = f"–î–∞–≤–∞–π –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∏–º!\n\n\nüíå **–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:** {channels or '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'} \n\n" \
               f"üìù **–¢–µ–º—ã:** {topics or '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'} \n\n" \
               f"üóù **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:** {keywords or '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"
        keyboard = await get_keyboard(["–í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ", "–ò–∑–º–µ–Ω–∏—Ç—å"])

        await event.client.send_message(event.chat_id, text, buttons=keyboard)
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="–í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ"))
async def get_accept(event):
    """"""
    user_id = event.message.peer_id.user_id
    current_step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [11]):
        await _update_current_user_step(user_id, 12)
        text = "–£—Ä–∞, –ø–æ—á—Ç–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–æ!üòá\n\n–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π, –≤—ã–±–∏—Ä–∞–π –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥" \
               " /summary, —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —è —Å–¥–µ–ª–∞—é –æ–±–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π " \
               "–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º –≤ –∫–æ—Ä–æ—Ç–∫–∏–µ –≤—ã–¥–µ—Ä–∂–∫–∏ ü§ó\n\n" \
               "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ä–µ–ø–æ—Å—Ç–∞–º–∏ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ /news. " \
               "–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —è –±—É–¥—É –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –ø–æ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º –∏–∑ —Ç–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n" \
               "–†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∏–¥–µ (–∫—Ä–∞—Ç–∫–∏–µ –≤—ã–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ —Ä–µ–ø–æ—Å—Ç—ã)\n\n" \
               "–ö—Å—Ç–∞—Ç–∏, –Ω–∞–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ / —Ç–µ–º—ã / –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏–∑ –º–µ–Ω—é —Å–ª–µ–≤–∞," \
               "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help üíú\n" \
               "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /stat üìä\n\n" \
               "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–º–µ–ª–æ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –æ—Ç –∫—É—á–∏ –Ω–æ–≤–æ—Å—Ç–µ–π üòè"
        await event.client.send_message(event.chat_id, text, buttons=Button.clear())
        await update_data_events_db(user_id, "is_success", {"step": current_step})
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="–ò–∑–º–µ–Ω–∏—Ç—å"))
async def get_change(event):
    """"""
    user_id = event.message.peer_id.user_id
    current_step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [11, 12]):
        await _update_current_user_step(user_id, 13)
        text = "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n" \
               "/interests - —Å–±—Ä–æ—Å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º\n" \
               "/channels - —Å–º–µ–Ω–∞ —á–∏—Ç–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n" \
               "/keywords - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è\n" \
               "/help - –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"
        keyboard = await get_keyboard(["–ù–∞–∑–∞–¥"])
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await update_data_events_db(user_id, "change", {"step": current_step})
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="–î–∞–ª–µ–µ"))
async def get_next(event):
    """"""
    user_id = event.message.peer_id.user_id

    if await is_expected_steps(user_id, [11]):
        await get_go(event)

    return


@bot.on(events.NewMessage(pattern="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—ã"))
async def add_topics_from_empty(event):
    """"""
    user_id = event.message.peer_id.user_id

    if await is_expected_steps(user_id, [823]):
        await _update_current_user_step(user_id, 2)
        await get_end(event)

    return


@bot.on(events.NewMessage(pattern="–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã"))
async def add_channels_from_empty(event):
    """"""
    user_id = event.message.peer_id.user_id
    if await is_expected_steps(user_id, [824]):
        await _update_current_user_step(user_id, 1)
        await get_begin(event)

    return


@bot.on(events.NewMessage(pattern="–û–±–æ –º–Ω–µ"))
async def get_next(event):
    """"""
    user_id = event.message.peer_id.user_id
    current_step = await _get_current_user_step(user_id)

    if await is_expected_steps(user_id, [1]):
        await _update_current_user_step(user_id, 10)
        keyboard = await get_keyboard(["–ù–∞–∑–∞–¥"])
        text = "AI –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤" \
               " –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n\n–í –Ω–∞—à–µ –≤—Ä–µ–º—è –±—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è," \
               " —á–∏—Ç–∞—è –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–¥—Ä—è–¥ –∏ –ª–µ–≥–∫–æ —Å–ª–æ–≤–∏—Ç—å –º–µ–ª–∞–Ω—Ö–æ–ª–∏—é –æ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ üòî\n" \
               "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤, –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –≤—ã–±–æ—Ä–∞ ~~—Å—Ç–æ–ø—Å–ª–æ–≤~~ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è" \
               " –º–Ω–æ–π –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:\n–Ø –º–æ–≥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç—ã –∏–∑ " \
               "–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –≤—ã–¥–µ—Ä–∂–∫–∏" \
               " –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n\n–ü–æ–º–æ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞ " \
               "–ø–æ –∫–æ–º–∞–Ω–¥–µ /help\n\n–†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º ü´°"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)
        await update_data_events_db(user_id, "about_me", {"step": current_step})
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="–ù–∞–∑–∞–¥"))
async def get_back(event):
    """"""

    user_id = event.message.peer_id.user_id
    if await is_expected_steps(user_id, [2]):
        await start(event)
    elif await is_expected_steps(user_id, [3]):
        await get_begin(event)
    elif await is_expected_steps(user_id, [4]):
        await get_end(event)
    elif await is_expected_steps(user_id, [6, 5]):
        await get_done(event)
    elif await is_expected_steps(user_id, [10]):
        await start(event)
    elif await is_expected_steps(user_id, [11]):
        await get_done(event)
    elif await is_expected_steps(user_id, [13]):
        await get_go(event)
    elif await is_expected_steps(user_id, [9]):
        await change_settings(event)

    return


@bot.on(events.NewMessage(pattern="/keywords"))
async def change_keywords(event):
    user_id = event.message.peer_id.user_id
    await update_data_events_db(user_id, "change_keywords", {"step": -1})
    await _update_current_user_step(user_id, 7)
    if not await get_user_keywords_db(user_id):
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å", "–ù–µ –Ω—É–∂–Ω–æ"])
        await event.client.send_message(event.chat_id, "–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç üôÉ", buttons=keyboard)
    else:
        keyboard = await get_keyboard(["–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞"])
        keywords = await get_user_keywords_db(user_id)
        keywords = ", ".join(keywords)
        text = f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {keywords} \n\n–í–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ " \
               f"(–º–∏–Ω–∏–º—É–º, –¥–≤–∞ —Å–ª–æ–≤–∞)"
        await event.client.send_message(event.chat_id, text, buttons=keyboard)

    return


@bot.on(events.NewMessage(pattern="/interests"))
async def change_topics(event):
    user_id = event.message.peer_id.user_id

    await update_data_events_db(user_id, "change_interests", {"step": -1})
    if await get_code_fill_form(user_id) == -1:
        await event.client.send_message(event.chat_id,
                                        "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ò∫Ô∏è\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ /start", buttons=Button.clear())
        await update_data_events_db(user_id, "change_interests", {"step": -1, "error": "without users"})
    elif await get_code_fill_form(user_id) == 1:
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", "–ù–µ –Ω—É–∂–Ω–æ"])
        await _update_current_user_step(user_id, 824)
        await event.client.send_message(event.chat_id, "–ö–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!\n\n"
                                                       "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ ‚ò∫Ô∏è", buttons=keyboard)
        await update_data_events_db(user_id, "change_interests", {"step": -1, "error": "without channels"})
    elif await get_code_fill_form(user_id) == 2:
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—ã", "–ù–µ –Ω—É–∂–Ω–æ"])
        await _update_current_user_step(user_id, 823)
        await event.client.send_message(event.chat_id, "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å—ã. –°–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? ‚ò∫Ô∏è", buttons=keyboard)
        await update_data_events_db(user_id, "change_interests", {"step": -1, "error": "without channels"})
    else:
        await _update_current_user_step(user_id, 8)
        await get_end(event)

    return


@bot.on(events.NewMessage(pattern="/channels"))
async def change_channels(event):
    user_id = event.message.peer_id.user_id
    await update_data_events_db(user_id, "change_channels", {"step": -1})
    if await get_code_fill_form(user_id) == -1:
        await event.client.send_message(event.chat_id,
                                        "–ï—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚ò∫Ô∏è\n\n–ù–∞–∂–∏–º–∞–π –Ω–∞ /start", buttons=Button.clear())
        await update_data_events_db(user_id, "change_channels", {"step": -1, "error": "without users"})
    elif await get_code_fill_form(user_id) == 1:
        keyboard = await get_keyboard(["–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", "–ù–µ –Ω—É–∂–Ω–æ"])
        await _update_current_user_step(user_id, 824)
        await event.client.send_message(event.chat_id, "–ö–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!\n\n"
                                                       "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ ‚ò∫Ô∏è", buttons=keyboard)
        await update_data_events_db(user_id, "change_channels", {"step": -1, "error": "without channels"})
    else:
        await _update_current_user_step(user_id, 9)
        channels = await get_user_channels_db(user_id)
        channels = set(channels)
        channels = [f"@{channel}" for channel in channels]
        channels = ", ".join(channels)
        keyboard = await get_keyboard(["–ù–∞–∑–∞–¥"])
        text = f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —á–∏—Ç–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {channels} \n–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ, –ø–µ—Ä–µ—à–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø–æ—Å—Ç—É" \
               f" –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —á–∏—Ç–∞—Ç—å (–Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö –∫–∞–Ω–∞–ª–æ–≤)" \
               f"\n\n"

        await event.client.send_message(event.chat_id, text, buttons=keyboard)

    return


@bot.on(events.NewMessage(pattern="/settings"))
async def change_settings(event):
    user_id = event.message.peer_id.user_id
    await update_data_events_db(user_id, "my_settings", {"step": -1})
    await _update_current_user_step(user_id, 24)
    if not await get_user_channels_db(user_id):
        keyboard = await get_keyboard(["–ù–∞—á–Ω–µ–º?"])
        await event.client.send_message(event.chat_id,
                                        "–£–ø—Å..–Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—â–µ –Ω–µ—Ç üôÉ\n\n–ê –∑–Ω–∞—á–∏—Ç - –ø–æ—Ä–∞ –Ω–∞—á–∞—Ç—å! /start", buttons=keyboard)
    else:
        channels = await get_user_channels_db(user_id)
        channels = set(channels)
        channels = ", ".join([f"@{channel}" for channel in channels])
        topics = await get_user_topics_db(user_id)
        if topics:
            topics = await match_topics_name(topics)
            topics = ", ".join(topics)
        else:
            topics = None
        keywords = await get_user_keywords_db(user_id)
        keywords = ", ".join(keywords)

        text = f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: \n\n\nüíå **–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:** {channels or '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'} \n\n" \
               f"üìù **–¢–µ–º—ã:** {topics or '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'} \n\n" \
               f"üóù **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è:** {keywords or '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}\n"

        await event.client.send_message(event.chat_id, text, buttons=Button.clear())

    return


@bot.on(events.NewMessage(pattern="/stat"))
async def get_stat(event):
    user_id = event.message.peer_id.user_id
    await update_data_events_db(user_id, "get_stat", {"step": -1})
    await _update_current_user_step(user_id, 67)

    filter_stat = await get_stat_filter_db(user_id)

    if filter_stat:
        await send_user_main_stat(event, filter_stat)
    else:
        keyboard = await get_keyboard(["–ù–∞—á–Ω–µ–º?"])
        await event.client.send_message(event.chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π. "
                                                       "–ù–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ –Ω–∞—á–∞—Ç—å üòè", buttons=keyboard)

    file_topics = await get_stat_interests()
    await send_user_file_stat(event, file_topics, "–¢–æ–ø –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    file_keywords = await get_stat_keywords()
    await send_user_file_stat(event, file_keywords, "–¢–æ–ø –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")

    return


@bot.on(events.NewMessage(pattern="–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–∞"))
async def change_keywords(event):
    user_id = event.message.peer_id.user_id
    await update_data_events_db(user_id, "remove_keywords", {"step": -1})
    if await is_expected_steps(user_id, [7]):
        await remove_from_db("user_keywords", user_id)
        text = f"–£–¥–∞–ª–∏–ª —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ üí´"
        await event.client.send_message(event.chat_id, text, buttons=Button.clear())
    else:
        pass

    return


@bot.on(events.NewMessage(pattern="/help"))
async def get_help(event):
    user_id = event.message.peer_id.user_id
    await update_data_events_db(user_id, "help", {"step": -1})

    text = f"–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n\n" \
           f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n" \
           f"/settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n" \
           f"/interests - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n" \
           f"/keywords - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n" \
           f"/channels - —Å–±—Ä–æ—Å–∏—Ç—å –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è\n" \
           f"/summary - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫—Ä–∞—Ç–∫–∏–º–∏ –≤—ã–¥–µ—Ä–∂–∫–∞–º–∏\n" \
           f"/news - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤\n" \
           f"/stat - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É \n\n\n" \
           f""

    await event.client.send_message(event.chat_id, text, buttons=Button.clear())

    return


bot.run_until_disconnected()
client.run_until_disconnected()
